# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-01-08 21:18
from __future__ import unicode_literals

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('novel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nick_name', models.CharField(default='小白', max_length=30, verbose_name='昵称')),
                ('birday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('address', models.CharField(max_length=200, verbose_name='地址')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机')),
                ('is_jh', models.BooleanField(default=False, verbose_name='是否激活')),
                ('hy_xbb', models.IntegerField(default=10, verbose_name='小白币')),
                ('hy_dj', models.CharField(choices=[('pthy', '普通会员'), ('xbhy', '小白会员'), ('cjxb', '超级小白')], default='pthy', max_length=10, verbose_name='会员等级')),
                ('image', models.ImageField(blank=True, default='image/default.png', null=True, upload_to='image/%Y/%m', verbose_name='头像')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='female', max_length=25, verbose_name='性别')),
                ('register_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='注册时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0, verbose_name='用户ID')),
                ('user_name', models.CharField(max_length=20, verbose_name='用户名')),
                ('novel_name', models.CharField(max_length=50, verbose_name='作者的名字')),
                ('novel_id', models.IntegerField(verbose_name='作者的ID')),
                ('novel_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='收藏时间')),
            ],
            options={
                'verbose_name': '收藏的作者',
                'verbose_name_plural': '收藏的作者',
                'db_table': 'Author',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('novel_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='收藏时间')),
                ('novel_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='novel.NovelModel', verbose_name='小说')),
                ('user_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.UserProFile', verbose_name='户名')),
            ],
            options={
                'verbose_name': '收藏的小说',
                'verbose_name_plural': '收藏的小说',
                'db_table': 'Collections',
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='验证码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('is_sx', models.IntegerField(choices=[('1', '可用'), ('0', '不可用')], default='1', verbose_name='激活是否可以')),
                ('send_type', models.CharField(choices=[('register', '用户注册'), ('forget', '找回密码'), ('upload_email', '修改邮箱')], default='register', max_length=20, verbose_name='验证码类型')),
                ('send_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='发送时间')),
            ],
            options={
                'verbose_name': '邮箱验证码',
                'verbose_name_plural': '邮箱验证码',
                'db_table': 'EmailVerifyRecord',
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.IntegerField(default=0, verbose_name='接收用户')),
                ('mess_title', models.CharField(max_length=30, verbose_name='消息名称')),
                ('mess_text', models.CharField(max_length=100, verbose_name='消息内容')),
                ('mess_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='消息发送时间')),
            ],
            options={
                'verbose_name': '用户消息',
                'verbose_name_plural': '用户消息',
                'db_table': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='ReadNovel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0, verbose_name='用户ID')),
                ('user_name', models.CharField(max_length=20, verbose_name='用户名')),
                ('novel_name', models.CharField(max_length=50, verbose_name='小说的名字')),
                ('novel_id', models.IntegerField(verbose_name='小说的ID')),
                ('novel_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='收藏时间')),
            ],
            options={
                'verbose_name': '阅读记录',
                'verbose_name_plural': '阅读记录',
                'db_table': 'ReadNovel',
            },
        ),
        migrations.CreateModel(
            name='RechargeUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=20, verbose_name='用户名')),
                ('user_id', models.IntegerField(default=0, verbose_name='用户ID')),
                ('RechargeSum', models.IntegerField(default=0, verbose_name='充值金额')),
                ('RechargeRecord', models.DateTimeField(default=datetime.datetime.now, verbose_name='充值记录')),
            ],
            options={
                'verbose_name': '充值记录',
                'verbose_name_plural': '充值记录',
                'db_table': 'RechargeUser',
            },
        ),
        migrations.CreateModel(
            name='AdminPro',
            fields=[
            ],
            options={
                'verbose_name': '管理员信息',
                'verbose_name_plural': '管理员信息',
                'proxy': True,
                'indexes': [],
            },
            bases=('users.userprofile',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
